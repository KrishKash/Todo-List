{"version":3,"sources":["Components/TodoTask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoTask","list","className","task","map","key","taskName","deadline","onClick","completeTask","App","useState","setTask","setDealine","description","setDescription","todoList","setTodoList","handleChange","event","target","name","value","Number","required","title","type","placeholder","onChange","disabled","length","newTask","taskDesc","taskNameToDelete","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MA+CeA,EAvCE,SAACC,GAChB,OACE,qBAAKC,UAAU,OAAf,SACE,qBAAKA,UAAU,UAAf,SACE,kCACE,gCACE,+BACE,2CACA,uDACA,6CAGJ,gCAEGD,EAAKE,KAAKC,KAAI,SAACD,EAAaE,GAC3B,OACE,+BACE,6BAAKF,EAAKG,WACV,6BAAKH,EAAKI,WACV,6BACE,wBAAQC,QAAS,WACfP,EAAKQ,aAAaN,EAAKG,SACxB,EAFD,mBAQP,YASZ,ECmCcI,EA3EC,WACd,MAAwBC,mBAAiB,IAAzC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA+BD,mBAAiB,GAAhD,mBAAOJ,EAAP,KAAiBM,EAAjB,KACA,EAAsCF,mBAAiB,IAAvD,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAgCJ,mBAAkB,IAAlD,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAACC,GACM,SAAtBA,EAAMC,OAAOC,KACfT,EAAQO,EAAMC,OAAOE,OACU,gBAAtBH,EAAMC,OAAOC,KACtBN,EAAeI,EAAMC,OAAOE,OAE5BT,EAAWU,OAAOJ,EAAMC,OAAOE,OAElC,EAkBD,OACE,sBAAKpB,UAAU,MAAf,UACE,gDACA,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,uBACEsB,UAAQ,EACRC,MAAM,YACNC,KAAK,OACLC,YAAY,eACZN,KAAK,OACLC,MAAOnB,EACPyB,SAAUV,IAEZ,uBACEO,MAAM,mBACNC,KAAK,WACLC,YAAY,sBACZN,KAAK,cACLC,MAAOR,EACPc,SAAUV,IAEZ,uBACEO,MAAM,2BACND,UAAQ,EACRE,KAAK,SACLC,YAAY,yBACZN,KAAK,WACLC,MAAOf,EACPqB,SAAUV,IAEZ,wBAAQW,SAAwB,IAAbtB,GAAkBJ,EAAK2B,OAAS,EAAmBL,MAAM,WAAWjB,QA/C/E,WACd,IAAMuB,EAAU,CAAEzB,SAAUH,EAAMI,SAAUA,EAAUyB,SAAUlB,GAChEG,EAAY,GAAD,mBAAKD,GAAL,CAAee,KAC1BnB,EAAQ,IACRC,EAAW,GACXE,EAAe,GAChB,EAyCO,2BAIJ,qBAAKb,UAAU,WAAf,SACGc,EAASc,OAAS,GAAK,cAAC,EAAD,CAAU3B,KAAMa,EAAUP,aA5CnC,SAACwB,GACpBhB,EACED,EAASkB,QAAO,SAAC/B,GACf,OAAOA,EAAKG,WAAa2B,CAC1B,IAEJ,QA2CF,EChEcE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,ECPDQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.0a7198be.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ITask } from \"../Interfaces\";\r\n\r\ninterface Props {\r\n  task: ITask[];\r\n  completeTask(taskNameToDelete: string): void;\r\n}\r\n\r\nconst TodoTask = (list: Props) => {\r\n  return (\r\n    <div className=\"task\">\r\n      <div className=\"content\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Task Name</th>\r\n              <th>Task Deadline(in hrs)</th>\r\n              <th>Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n\r\n            {list.task.map((task: ITask, key: number) => {\r\n              return (\r\n                <tr>\r\n                  <td>{task.taskName}</td>\r\n                  <td>{task.deadline}</td>\r\n                  <td>\r\n                    <button onClick={() => {\r\n                      list.completeTask(task.taskName);\r\n                    }}\r\n                    >\r\n                      X\r\n                    </button>\r\n                  </td>\r\n                </tr>)\r\n            })}\r\n\r\n          </tbody>\r\n        </table>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTask;\r\n","import React, { FC, ChangeEvent, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport TodoTask from \"./Components/TodoTask\";\r\nimport { ITask } from \"./Interfaces\";\r\n\r\nconst App: FC = () => {\r\n  const [task, setTask] = useState<string>(\"\");\r\n  const [deadline, setDealine] = useState<number>(0);\r\n  const [description, setDescription] = useState<string>(\"\");\r\n  const [todoList, setTodoList] = useState<ITask[]>([]);\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    if (event.target.name === \"task\") {\r\n      setTask(event.target.value);\r\n    } else if (event.target.name === \"description\") {\r\n      setDescription(event.target.value);\r\n    } else {\r\n      setDealine(Number(event.target.value));\r\n    }\r\n  };\r\n\r\n  const addTask = (): void => {\r\n    const newTask = { taskName: task, deadline: deadline, taskDesc: description };\r\n    setTodoList([...todoList, newTask]);\r\n    setTask(\"\");\r\n    setDealine(0);\r\n    setDescription(\"\");\r\n  };\r\n\r\n  const completeTask = (taskNameToDelete: string): void => {\r\n    setTodoList(\r\n      todoList.filter((task) => {\r\n        return task.taskName !== taskNameToDelete;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>To-Do List App</h2>\r\n      <div className=\"header\">\r\n        <div className=\"inputContainer\">\r\n          <input\r\n            required\r\n            title=\"Task name\"\r\n            type=\"text\"\r\n            placeholder=\"Task name...\"\r\n            name=\"task\"\r\n            value={task}\r\n            onChange={handleChange}\r\n          />\r\n          <input\r\n            title=\"Task Description\"\r\n            type=\"textarea\"\r\n            placeholder=\"Task description...\"\r\n            name=\"description\"\r\n            value={description}\r\n            onChange={handleChange}\r\n          />\r\n          <input\r\n            title=\"Task deadline (in hours)\"\r\n            required\r\n            type=\"number\"\r\n            placeholder=\"Deadline (in hours)...\"\r\n            name=\"deadline\"\r\n            value={deadline}\r\n            onChange={handleChange}\r\n          />\r\n          <button disabled={(deadline === 0 || task.length < 0) ? true : false} title=\"Add task\" onClick={addTask}>Add Task</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"todoList\">\r\n        {todoList.length > 0 && <TodoTask task={todoList} completeTask={completeTask} />\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}